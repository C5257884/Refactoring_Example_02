*----------------------------------------------------------------------*
*       CLASS lcl_invoice_row_processor DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
  CLASS lcl_invoice_row_processor DEFINITION ##FINAL.
    PUBLIC SECTION.
      METHODS:
        gtd_splitting
          IMPORTING i_orig_inv     TYPE vbeln_vf
                    i_orig_inv_pos TYPE vbrp-posnr
          CHANGING  cs_invoice     LIKE LINE OF it_invoice
                    ct_gtd_invoice TYPE ztj_3rf_tcorrinv..
    PROTECTED SECTION.

      TYPES:
        BEGIN OF ty_s_gtdinv,
          herkl     TYPE j_3rfgtdinv-herkl,
          customs   TYPE j_3rfgtdinv-customs,
          gtddate   TYPE j_3rfgtdinv-gtddate,
          gtdnumber TYPE j_3rfgtdinv-gtdnumber,
          gtdpos    TYPE j_3rfgtd-gtdpos,
          menge     TYPE j_3rfgtdinv-menge,
        END OF ty_s_gtdinv,
        ty_t_gtdinv TYPE STANDARD TABLE OF ty_s_gtdinv WITH DEFAULT KEY.

      TYPES:
        BEGIN OF ty_s_gtdpos,
          bukrs     TYPE j_3rfgtd-bukrs    ,
          customs   TYPE j_3rfgtd-customs  ,
          gtdnumber TYPE j_3rfgtd-gtdnumber,
          gtddate   TYPE j_3rfgtd-gtddate  ,
          gtdtype   TYPE j_3rfgtd-gtdtype  ,
          lifnr     TYPE j_3rfgtd-lifnr    ,
          posnr     TYPE j_3rfgtd-posnr    ,
          gtdpos    TYPE j_3rfgtd-gtdpos   ,
        END OF ty_s_gtdpos,
        ty_t_gtdpos TYPE STANDARD TABLE OF ty_s_gtdpos
          WITH KEY primary_key COMPONENTS bukrs
                                          customs
                                          gtdnumber
                                          gtddate
                                          gtdtype
                                          lifnr
                                          posnr    .
      METHODS:
        invoke_j_3rfgtd_invget
          IMPORTING
            i_invoicenum  TYPE vbeln_vf
            i_invoicepos  TYPE vbrp-posnr
          RETURNING value(rt_gtdinv)  TYPE  j_3rfgtdinv_t,
        invoke_function_exists
          RETURNING value(result) TYPE sy-subrc ,
        invoke_dynamic_function
          IMPORTING
            it_gtdinv       TYPE j_3rfgtdinv_t
            i_orig_inv      TYPE vbeln_vf
            i_orig_inv_pos  TYPE vbrp-posnr
          EXPORTING
            et_gtdinv       TYPE ty_t_gtdinv
            e_pos_menge     TYPE j_3rfgtdinv-menge.

      METHODS db_read_t005t
       IMPORTING
         i_herkl TYPE j_3rfgtdinv-herkl
         i_lang  TYPE t002-spras
       CHANGING
         cs_land TYPE ty_s_lands
         rc_code TYPE sy-subrc.

      METHODS db_read_t005_intcn3
       IMPORTING
         i_herkl TYPE j_3rfgtdinv-herkl
       RETURNING value(r_intcn3) TYPE t005-intcn3.

      METHODS db_read_j_3rfgtd
        IMPORTING
          it_gtdinv TYPE j_3rfgtdinv_t
        RETURNING value(rt_result) TYPE ty_t_gtdpos.

      METHODS
        proc_err_input_gtd
          CHANGING
            ct_gtdinv TYPE j_3rfgtdinv_t.

      CONSTANTS c_imcd  TYPE rs38l_fnam VALUE 'J_3RF_GET_IMCD_INV_A'.
  ENDCLASS.                    "lcl_invoice_row_processor DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_invoice_row_processor IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
  CLASS lcl_invoice_row_processor IMPLEMENTATION.

    METHOD gtd_splitting.
      DATA: lt_gtdinv TYPE ty_t_gtdinv,
            ls_gtdinv LIKE LINE OF lt_gtdinv[].
      DATA: et_gtdinv TYPE j_3rfgtdinv_t,
            wa_gtdinv TYPE j_3rfgtdinv.
      DATA: pos_menge TYPE j_3rfgtdinv-menge,
            round_fkimg TYPE vbdpr-fkimg,
            round_smnet TYPE vbdpr-kzwi3,
            round_smvat TYPE vbdpr-kzwi5,
            round_total TYPE vbdpr-kzwi4,
            lnum TYPE i, i_cnt TYPE i,
            gtd_date(6).
      DATA: ls_gtd_invoice LIKE LINE OF ct_gtd_invoice[] ,
            ls_lands       LIKE LINE OF lands[],
            lt_gtdnumber_split TYPE STANDARD TABLE OF j_3rfgtdinv-gtdnumber WITH DEFAULT KEY,
            l_subrc        TYPE sy-subrc,
            lt_gtdpos      TYPE ty_t_gtdpos.
      FIELD-SYMBOLS:
              <ls_gtdinv> LIKE LINE OF lt_gtdinv[],
              <ls_gtdpos> LIKE LINE OF lt_gtdpos[].

      "-- Чтение ГТД к позиции фактуры
      et_gtdinv[] = invoke_j_3rfgtd_invget( i_invoicenum = i_orig_inv
                                            i_invoicepos = i_orig_inv_pos ).
      "-- Костыль:
      proc_err_input_gtd( CHANGING ct_gtdinv = et_gtdinv[] ).

      IF invoke_function_exists( ) = 0.
        invoke_dynamic_function(
          EXPORTING
            it_gtdinv      = et_gtdinv[]
            i_orig_inv     = i_orig_inv
            i_orig_inv_pos = i_orig_inv_pos
          IMPORTING
            et_gtdinv      = lt_gtdinv[]
            e_pos_menge    = pos_menge ).
      ELSE.
        lt_gtdpos[] = db_read_j_3rfgtd( et_gtdinv[] ).

        LOOP AT et_gtdinv INTO wa_gtdinv
          WHERE invoicenum = i_orig_inv     " vbdkr-vbeln
            AND invoicepos = i_orig_inv_pos." wa_invoice-zposnr.

          MOVE-CORRESPONDING wa_gtdinv TO ls_gtdinv.

          READ TABLE lt_gtdpos[] ASSIGNING <ls_gtdpos>
            WITH TABLE KEY bukrs    = wa_gtdinv-bukrs
                           customs  = wa_gtdinv-customs
                           gtdnumber = wa_gtdinv-gtdnumber
                           gtddate  = wa_gtdinv-gtddate
                           gtdtype  = wa_gtdinv-gtdtype
                           lifnr    = wa_gtdinv-lifnr
                           posnr    = wa_gtdinv-posnr.
          IF sy-subrc = 0.
            ls_gtdinv-gtdpos = <ls_gtdpos>-gtdpos.
          ENDIF.

          pos_menge = pos_menge + ls_gtdinv-menge.
          IF ( ls_gtdinv-herkl = 'RU' OR ls_gtdinv-herkl = 'KZ' OR ls_gtdinv-herkl = 'BY' ).
            CLEAR: ls_gtdinv-customs,   ls_gtdinv-gtddate,
                   ls_gtdinv-gtdnumber, ls_gtdinv-gtdpos.
          ENDIF.
          COLLECT ls_gtdinv INTO lt_gtdinv[].
        ENDLOOP.
      ENDIF.

      IF lt_gtdinv[] IS INITIAL.
        APPEND cs_invoice TO gtd_invoice[].
        RETURN.
      ENDIF.

      CLEAR: round_fkimg, round_smnet, round_smvat, round_total, i_cnt.
      lnum = lines( lt_gtdinv[] ).

      LOOP AT lt_gtdinv[] ASSIGNING <ls_gtdinv>.
        i_cnt = i_cnt + 1.
        MOVE cs_invoice TO ls_gtd_invoice.
* country of origin
        ls_gtd_invoice-zcountry_code = <ls_gtdinv>-herkl.
        CLEAR ls_gtd_invoice-zcountry_name.
        IF <ls_gtdinv>-herkl = 'RU'.
          ls_gtd_invoice-zcountry_name = ' --'.
          CLEAR ls_gtd_invoice-zcountry_code.
        ELSE.
          READ TABLE lands[] INTO ls_lands WITH KEY herkl = <ls_gtdinv>-herkl.
          IF sy-subrc = 0.
            ls_gtd_invoice-zcountry_name = ls_lands-landx.
            ls_gtd_invoice-zcountry_code = ls_lands-intcn3.
          ELSE.
            db_read_t005t( EXPORTING i_herkl = <ls_gtdinv>-herkl
                                     i_lang  = lang
                           CHANGING  cs_land = ls_lands
                                     rc_code = l_subrc ).
            IF l_subrc = 0.
              ls_gtd_invoice-zcountry_name = ls_lands-landx.
              ls_lands-intcn3 = db_read_t005_intcn3( i_herkl = <ls_gtdinv>-herkl ).
              APPEND ls_lands TO lands[].
              ls_gtd_invoice-zcountry_code = ls_lands-intcn3.
            ENDIF.
          ENDIF.
        ENDIF.

        " to build GTD number for printing
        IF ( <ls_gtdinv>-herkl = 'RU' OR <ls_gtdinv>-herkl = 'KZ'
            OR <ls_gtdinv>-herkl = 'BY' ).
          ls_gtd_invoice-zregnum_track = '   -----------------'.
        ELSE.
          gtd_date = |{ <ls_gtdinv>-gtddate+6(2) }{ <ls_gtdinv>-gtddate+4(2) }{ <ls_gtdinv>-gtddate+2(2) }|.
          SPLIT <ls_gtdinv>-gtdnumber AT '/' INTO TABLE lt_gtdnumber_split[].
          READ TABLE lt_gtdnumber_split[] INDEX 1 INTO <ls_gtdinv>-gtdnumber.
          ls_gtd_invoice-zregnum_track = |{ <ls_gtdinv>-customs }/{ gtd_date }/{ <ls_gtdinv>-gtdnumber }|.
        ENDIF.
        " quantity and amounts recalculating
        IF i_cnt < lnum.
          ls_gtd_invoice-orig_fkimg = cs_invoice-orig_fkimg * <ls_gtdinv>-menge / pos_menge.
          round_fkimg = round_fkimg + ls_gtd_invoice-orig_fkimg.
          ls_gtd_invoice-orig_smnet = cs_invoice-orig_smnet * <ls_gtdinv>-menge / pos_menge.
          round_smnet = round_smnet + ls_gtd_invoice-orig_smnet.
          ls_gtd_invoice-orig_smvat = cs_invoice-orig_smvat * <ls_gtdinv>-menge / pos_menge.
          round_smvat = round_smvat + ls_gtd_invoice-orig_smvat.
          ls_gtd_invoice-orig_total = cs_invoice-orig_total * <ls_gtdinv>-menge / pos_menge.
          round_total = round_total + ls_gtd_invoice-orig_total.
        ELSE.
          ls_gtd_invoice-orig_fkimg = cs_invoice-orig_fkimg - round_fkimg.
          ls_gtd_invoice-orig_smnet = cs_invoice-orig_smnet - round_smnet.
          ls_gtd_invoice-orig_smvat = cs_invoice-orig_smvat - round_smvat.
          ls_gtd_invoice-orig_total = cs_invoice-orig_total - round_total.
        ENDIF.
        APPEND ls_gtd_invoice TO ct_gtd_invoice[].
      ENDLOOP.

    ENDMETHOD.                    "gtd_splitting

    METHOD invoke_j_3rfgtd_invget.
      CALL FUNCTION 'J_3RFGTD_INVGET'
        EXPORTING
          p_invoicenum = i_invoicenum " vbdkr-vbeln
          p_invoicepos = i_invoicepos " wa_invoice-zposnr
          p_read_db    = 'X'
        IMPORTING
          et_gtdinv    = rt_gtdinv[].
    ENDMETHOD.                    "invoke_j_3rfgtd_invget

    METHOD invoke_function_exists.
      CALL FUNCTION 'FUNCTION_EXISTS'
        EXPORTING
          funcname = c_imcd
        EXCEPTIONS
          OTHERS   = 1.
      result = sy-subrc.
    ENDMETHOD.                    "invoke_function_exists

    METHOD invoke_dynamic_function.

      CALL FUNCTION c_imcd ##EXISTS
        EXPORTING
          it_gtdinv    = it_gtdinv[]
          iv_vbeln     = i_orig_inv     " vbdkr-vbeln
          iv_posnr     = i_orig_inv_pos " wa_invoice-zposnr
        IMPORTING
          et_gtdinv    = et_gtdinv[]
          ev_pos_menge = e_pos_menge.

    ENDMETHOD.                    "invoke_dynamic_function

    METHOD db_read_t005t.
      CLEAR rc_code.
      SELECT SINGLE land1 landx FROM t005t INTO
        (cs_land-herkl, cs_land-landx)
        WHERE land1 = i_herkl
          AND spras = i_lang.
      rc_code = sy-subrc.
    ENDMETHOD.                    "db_read_t005t

    METHOD db_read_t005_intcn3 .
      SELECT SINGLE intcn3 FROM t005 INTO r_intcn3
              WHERE land1 = i_herkl.
    ENDMETHOD.                    "db_read_t005_intcn3

    METHOD db_read_j_3rfgtd.

      IF it_gtdinv[] IS INITIAL.
        RETURN.
      ENDIF.

      SELECT bukrs
             customs
             gtdnumber
             gtddate
             gtdtype
             lifnr
             posnr
             gtdpos
        INTO TABLE rt_result[] FROM j_3rfgtd
        FOR ALL ENTRIES IN it_gtdinv[]
       WHERE bukrs     = it_gtdinv-bukrs
         AND customs   = it_gtdinv-customs
         AND gtdnumber = it_gtdinv-gtdnumber
         AND gtddate   = it_gtdinv-gtddate
         AND gtdtype   = it_gtdinv-gtdtype
         AND lifnr     = it_gtdinv-lifnr
         AND posnr     = it_gtdinv-posnr.

    ENDMETHOD.                    "db_read_j_3rfgtd

    METHOD proc_err_input_gtd.
      DATA lt_tmp LIKE ct_gtdinv[].
      FIELD-SYMBOLS:
        <ls_gtdinv> LIKE LINE OF lt_tmp[],
        <ls_result> LIKE LINE OF ct_gtdinv[].

      lt_tmp[] = ct_gtdinv[].
      SORT lt_tmp[] BY gtdnumber invoicenum invoicepos matnr.
      CLEAR ct_gtdinv[].

      LOOP AT lt_tmp[] ASSIGNING <ls_gtdinv>.

        READ TABLE ct_gtdinv[] ASSIGNING <ls_result> BINARY SEARCH
          WITH KEY gtdnumber  = <ls_gtdinv>-gtdnumber
                   invoicenum = <ls_gtdinv>-invoicenum
                   invoicepos = <ls_gtdinv>-invoicepos
                   matnr      = <ls_gtdinv>-matnr.
        IF sy-subrc = 0.
          <ls_result>-menge = <ls_result>-menge + <ls_gtdinv>-menge.
        ELSE.
          INSERT <ls_gtdinv> INTO TABLE ct_gtdinv[].
        ENDIF.
      ENDLOOP.
    ENDMETHOD.                    "proc_err_input_gtd

  ENDCLASS.                    "lcl_invoice_row_processor IMPLEMENTATION
